// Code generated by counterfeiter. DO NOT EDIT.
package servicefakes

import (
	"context"
	"sync"

	"github.com/ggsomnoev/cyberark-url-shortener/internal/urlshortener/model"
	"github.com/ggsomnoev/cyberark-url-shortener/internal/urlshortener/service"
)

type FakeStore struct {
	FindByShortCodeStub        func(context.Context, string) (model.URL, error)
	findByShortCodeMutex       sync.RWMutex
	findByShortCodeArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	findByShortCodeReturns struct {
		result1 model.URL
		result2 error
	}
	findByShortCodeReturnsOnCall map[int]struct {
		result1 model.URL
		result2 error
	}
	SaveStub        func(context.Context, model.URL) error
	saveMutex       sync.RWMutex
	saveArgsForCall []struct {
		arg1 context.Context
		arg2 model.URL
	}
	saveReturns struct {
		result1 error
	}
	saveReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeStore) FindByShortCode(arg1 context.Context, arg2 string) (model.URL, error) {
	fake.findByShortCodeMutex.Lock()
	ret, specificReturn := fake.findByShortCodeReturnsOnCall[len(fake.findByShortCodeArgsForCall)]
	fake.findByShortCodeArgsForCall = append(fake.findByShortCodeArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.FindByShortCodeStub
	fakeReturns := fake.findByShortCodeReturns
	fake.recordInvocation("FindByShortCode", []interface{}{arg1, arg2})
	fake.findByShortCodeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeStore) FindByShortCodeCallCount() int {
	fake.findByShortCodeMutex.RLock()
	defer fake.findByShortCodeMutex.RUnlock()
	return len(fake.findByShortCodeArgsForCall)
}

func (fake *FakeStore) FindByShortCodeCalls(stub func(context.Context, string) (model.URL, error)) {
	fake.findByShortCodeMutex.Lock()
	defer fake.findByShortCodeMutex.Unlock()
	fake.FindByShortCodeStub = stub
}

func (fake *FakeStore) FindByShortCodeArgsForCall(i int) (context.Context, string) {
	fake.findByShortCodeMutex.RLock()
	defer fake.findByShortCodeMutex.RUnlock()
	argsForCall := fake.findByShortCodeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeStore) FindByShortCodeReturns(result1 model.URL, result2 error) {
	fake.findByShortCodeMutex.Lock()
	defer fake.findByShortCodeMutex.Unlock()
	fake.FindByShortCodeStub = nil
	fake.findByShortCodeReturns = struct {
		result1 model.URL
		result2 error
	}{result1, result2}
}

func (fake *FakeStore) FindByShortCodeReturnsOnCall(i int, result1 model.URL, result2 error) {
	fake.findByShortCodeMutex.Lock()
	defer fake.findByShortCodeMutex.Unlock()
	fake.FindByShortCodeStub = nil
	if fake.findByShortCodeReturnsOnCall == nil {
		fake.findByShortCodeReturnsOnCall = make(map[int]struct {
			result1 model.URL
			result2 error
		})
	}
	fake.findByShortCodeReturnsOnCall[i] = struct {
		result1 model.URL
		result2 error
	}{result1, result2}
}

func (fake *FakeStore) Save(arg1 context.Context, arg2 model.URL) error {
	fake.saveMutex.Lock()
	ret, specificReturn := fake.saveReturnsOnCall[len(fake.saveArgsForCall)]
	fake.saveArgsForCall = append(fake.saveArgsForCall, struct {
		arg1 context.Context
		arg2 model.URL
	}{arg1, arg2})
	stub := fake.SaveStub
	fakeReturns := fake.saveReturns
	fake.recordInvocation("Save", []interface{}{arg1, arg2})
	fake.saveMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeStore) SaveCallCount() int {
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	return len(fake.saveArgsForCall)
}

func (fake *FakeStore) SaveCalls(stub func(context.Context, model.URL) error) {
	fake.saveMutex.Lock()
	defer fake.saveMutex.Unlock()
	fake.SaveStub = stub
}

func (fake *FakeStore) SaveArgsForCall(i int) (context.Context, model.URL) {
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	argsForCall := fake.saveArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeStore) SaveReturns(result1 error) {
	fake.saveMutex.Lock()
	defer fake.saveMutex.Unlock()
	fake.SaveStub = nil
	fake.saveReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) SaveReturnsOnCall(i int, result1 error) {
	fake.saveMutex.Lock()
	defer fake.saveMutex.Unlock()
	fake.SaveStub = nil
	if fake.saveReturnsOnCall == nil {
		fake.saveReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.saveReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeStore) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.findByShortCodeMutex.RLock()
	defer fake.findByShortCodeMutex.RUnlock()
	fake.saveMutex.RLock()
	defer fake.saveMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeStore) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ service.Store = new(FakeStore)
