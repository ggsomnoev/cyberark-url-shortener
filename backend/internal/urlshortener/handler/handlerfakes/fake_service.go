// Code generated by counterfeiter. DO NOT EDIT.
package handlerfakes

import (
	"context"
	"sync"

	"github.com/ggsomnoev/cyberark-url-shortener/internal/urlshortener/handler"
)

type FakeService struct {
	ResolveURLStub        func(context.Context, string) (string, error)
	resolveURLMutex       sync.RWMutex
	resolveURLArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	resolveURLReturns struct {
		result1 string
		result2 error
	}
	resolveURLReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	ShortenURLStub        func(context.Context, string) (string, error)
	shortenURLMutex       sync.RWMutex
	shortenURLArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	shortenURLReturns struct {
		result1 string
		result2 error
	}
	shortenURLReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeService) ResolveURL(arg1 context.Context, arg2 string) (string, error) {
	fake.resolveURLMutex.Lock()
	ret, specificReturn := fake.resolveURLReturnsOnCall[len(fake.resolveURLArgsForCall)]
	fake.resolveURLArgsForCall = append(fake.resolveURLArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.ResolveURLStub
	fakeReturns := fake.resolveURLReturns
	fake.recordInvocation("ResolveURL", []interface{}{arg1, arg2})
	fake.resolveURLMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeService) ResolveURLCallCount() int {
	fake.resolveURLMutex.RLock()
	defer fake.resolveURLMutex.RUnlock()
	return len(fake.resolveURLArgsForCall)
}

func (fake *FakeService) ResolveURLCalls(stub func(context.Context, string) (string, error)) {
	fake.resolveURLMutex.Lock()
	defer fake.resolveURLMutex.Unlock()
	fake.ResolveURLStub = stub
}

func (fake *FakeService) ResolveURLArgsForCall(i int) (context.Context, string) {
	fake.resolveURLMutex.RLock()
	defer fake.resolveURLMutex.RUnlock()
	argsForCall := fake.resolveURLArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeService) ResolveURLReturns(result1 string, result2 error) {
	fake.resolveURLMutex.Lock()
	defer fake.resolveURLMutex.Unlock()
	fake.ResolveURLStub = nil
	fake.resolveURLReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeService) ResolveURLReturnsOnCall(i int, result1 string, result2 error) {
	fake.resolveURLMutex.Lock()
	defer fake.resolveURLMutex.Unlock()
	fake.ResolveURLStub = nil
	if fake.resolveURLReturnsOnCall == nil {
		fake.resolveURLReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.resolveURLReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeService) ShortenURL(arg1 context.Context, arg2 string) (string, error) {
	fake.shortenURLMutex.Lock()
	ret, specificReturn := fake.shortenURLReturnsOnCall[len(fake.shortenURLArgsForCall)]
	fake.shortenURLArgsForCall = append(fake.shortenURLArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.ShortenURLStub
	fakeReturns := fake.shortenURLReturns
	fake.recordInvocation("ShortenURL", []interface{}{arg1, arg2})
	fake.shortenURLMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeService) ShortenURLCallCount() int {
	fake.shortenURLMutex.RLock()
	defer fake.shortenURLMutex.RUnlock()
	return len(fake.shortenURLArgsForCall)
}

func (fake *FakeService) ShortenURLCalls(stub func(context.Context, string) (string, error)) {
	fake.shortenURLMutex.Lock()
	defer fake.shortenURLMutex.Unlock()
	fake.ShortenURLStub = stub
}

func (fake *FakeService) ShortenURLArgsForCall(i int) (context.Context, string) {
	fake.shortenURLMutex.RLock()
	defer fake.shortenURLMutex.RUnlock()
	argsForCall := fake.shortenURLArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeService) ShortenURLReturns(result1 string, result2 error) {
	fake.shortenURLMutex.Lock()
	defer fake.shortenURLMutex.Unlock()
	fake.ShortenURLStub = nil
	fake.shortenURLReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeService) ShortenURLReturnsOnCall(i int, result1 string, result2 error) {
	fake.shortenURLMutex.Lock()
	defer fake.shortenURLMutex.Unlock()
	fake.ShortenURLStub = nil
	if fake.shortenURLReturnsOnCall == nil {
		fake.shortenURLReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.shortenURLReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.resolveURLMutex.RLock()
	defer fake.resolveURLMutex.RUnlock()
	fake.shortenURLMutex.RLock()
	defer fake.shortenURLMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handler.Service = new(FakeService)
