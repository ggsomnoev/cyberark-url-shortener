// Code generated by counterfeiter. DO NOT EDIT.
package handlerfakes

import (
	"sync"

	"github.com/ggsomnoev/cyberark-url-shortener/internal/urlshortener/handler"
	"github.com/ggsomnoev/cyberark-url-shortener/internal/urlshortener/model"
)

type FakeValidator struct {
	ValidateShortCodeStub        func(string) error
	validateShortCodeMutex       sync.RWMutex
	validateShortCodeArgsForCall []struct {
		arg1 string
	}
	validateShortCodeReturns struct {
		result1 error
	}
	validateShortCodeReturnsOnCall map[int]struct {
		result1 error
	}
	ValidateShortenRequestStub        func(model.ShortenRequest) error
	validateShortenRequestMutex       sync.RWMutex
	validateShortenRequestArgsForCall []struct {
		arg1 model.ShortenRequest
	}
	validateShortenRequestReturns struct {
		result1 error
	}
	validateShortenRequestReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeValidator) ValidateShortCode(arg1 string) error {
	fake.validateShortCodeMutex.Lock()
	ret, specificReturn := fake.validateShortCodeReturnsOnCall[len(fake.validateShortCodeArgsForCall)]
	fake.validateShortCodeArgsForCall = append(fake.validateShortCodeArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ValidateShortCodeStub
	fakeReturns := fake.validateShortCodeReturns
	fake.recordInvocation("ValidateShortCode", []interface{}{arg1})
	fake.validateShortCodeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeValidator) ValidateShortCodeCallCount() int {
	fake.validateShortCodeMutex.RLock()
	defer fake.validateShortCodeMutex.RUnlock()
	return len(fake.validateShortCodeArgsForCall)
}

func (fake *FakeValidator) ValidateShortCodeCalls(stub func(string) error) {
	fake.validateShortCodeMutex.Lock()
	defer fake.validateShortCodeMutex.Unlock()
	fake.ValidateShortCodeStub = stub
}

func (fake *FakeValidator) ValidateShortCodeArgsForCall(i int) string {
	fake.validateShortCodeMutex.RLock()
	defer fake.validateShortCodeMutex.RUnlock()
	argsForCall := fake.validateShortCodeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeValidator) ValidateShortCodeReturns(result1 error) {
	fake.validateShortCodeMutex.Lock()
	defer fake.validateShortCodeMutex.Unlock()
	fake.ValidateShortCodeStub = nil
	fake.validateShortCodeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeValidator) ValidateShortCodeReturnsOnCall(i int, result1 error) {
	fake.validateShortCodeMutex.Lock()
	defer fake.validateShortCodeMutex.Unlock()
	fake.ValidateShortCodeStub = nil
	if fake.validateShortCodeReturnsOnCall == nil {
		fake.validateShortCodeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.validateShortCodeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeValidator) ValidateShortenRequest(arg1 model.ShortenRequest) error {
	fake.validateShortenRequestMutex.Lock()
	ret, specificReturn := fake.validateShortenRequestReturnsOnCall[len(fake.validateShortenRequestArgsForCall)]
	fake.validateShortenRequestArgsForCall = append(fake.validateShortenRequestArgsForCall, struct {
		arg1 model.ShortenRequest
	}{arg1})
	stub := fake.ValidateShortenRequestStub
	fakeReturns := fake.validateShortenRequestReturns
	fake.recordInvocation("ValidateShortenRequest", []interface{}{arg1})
	fake.validateShortenRequestMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeValidator) ValidateShortenRequestCallCount() int {
	fake.validateShortenRequestMutex.RLock()
	defer fake.validateShortenRequestMutex.RUnlock()
	return len(fake.validateShortenRequestArgsForCall)
}

func (fake *FakeValidator) ValidateShortenRequestCalls(stub func(model.ShortenRequest) error) {
	fake.validateShortenRequestMutex.Lock()
	defer fake.validateShortenRequestMutex.Unlock()
	fake.ValidateShortenRequestStub = stub
}

func (fake *FakeValidator) ValidateShortenRequestArgsForCall(i int) model.ShortenRequest {
	fake.validateShortenRequestMutex.RLock()
	defer fake.validateShortenRequestMutex.RUnlock()
	argsForCall := fake.validateShortenRequestArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeValidator) ValidateShortenRequestReturns(result1 error) {
	fake.validateShortenRequestMutex.Lock()
	defer fake.validateShortenRequestMutex.Unlock()
	fake.ValidateShortenRequestStub = nil
	fake.validateShortenRequestReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeValidator) ValidateShortenRequestReturnsOnCall(i int, result1 error) {
	fake.validateShortenRequestMutex.Lock()
	defer fake.validateShortenRequestMutex.Unlock()
	fake.ValidateShortenRequestStub = nil
	if fake.validateShortenRequestReturnsOnCall == nil {
		fake.validateShortenRequestReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.validateShortenRequestReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeValidator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.validateShortCodeMutex.RLock()
	defer fake.validateShortCodeMutex.RUnlock()
	fake.validateShortenRequestMutex.RLock()
	defer fake.validateShortenRequestMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeValidator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handler.Validator = new(FakeValidator)
